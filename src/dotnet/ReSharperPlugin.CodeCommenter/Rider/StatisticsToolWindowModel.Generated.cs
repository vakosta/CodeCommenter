//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.10.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace JetBrains.Rider.Model
{
  
  
  /// <summary>
  /// <p>Generated from: StatisticsToolWindowModel.kt:13</p>
  /// </summary>
  [JetBrains.Application.ShellComponent]
  public class StatisticsToolWindowModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IRdEndpoint<Unit, Unit> GetContent => _GetContent;
    [NotNull] public IRdCall<ToolWindowContent, ToolWindowContent> OnContentUpdated => _OnContentUpdated;
    
    //private fields
    [NotNull] private readonly RdCall<Unit, Unit> _GetContent;
    [NotNull] private readonly RdCall<ToolWindowContent, ToolWindowContent> _OnContentUpdated;
    
    //primary constructor
    private StatisticsToolWindowModel(
      [NotNull] RdCall<Unit, Unit> getContent,
      [NotNull] RdCall<ToolWindowContent, ToolWindowContent> onContentUpdated
    )
    {
      if (getContent == null) throw new ArgumentNullException("getContent");
      if (onContentUpdated == null) throw new ArgumentNullException("onContentUpdated");
      
      _GetContent = getContent;
      _OnContentUpdated = onContentUpdated;
      BindableChildren.Add(new KeyValuePair<string, object>("getContent", _GetContent));
      BindableChildren.Add(new KeyValuePair<string, object>("onContentUpdated", _OnContentUpdated));
    }
    //secondary constructor
    private StatisticsToolWindowModel (
    ) : this (
      new RdCall<Unit, Unit>(JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid),
      new RdCall<ToolWindowContent, ToolWindowContent>(ToolWindowContent.Read, ToolWindowContent.Write, ToolWindowContent.Read, ToolWindowContent.Write)
    ) {}
    //deconstruct trait
    //statics
    
    
    
    protected override long SerializationHash => 934911186581831628L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(IdeRoot), IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    public StatisticsToolWindowModel(Lifetime lifetime, IProtocol protocol) : this()
    {
      Identify(protocol.Identities, RdId.Root.Mix("StatisticsToolWindowModel"));
      Bind(lifetime, protocol, "StatisticsToolWindowModel");
    }
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("StatisticsToolWindowModel (");
      using (printer.IndentCookie()) {
        printer.Print("getContent = "); _GetContent.PrintEx(printer); printer.Println();
        printer.Print("onContentUpdated = "); _OnContentUpdated.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: StatisticsToolWindowModel.kt:14</p>
  /// </summary>
  public sealed class Row : IPrintable, IEquatable<Row>
  {
    //fields
    //public fields
    [NotNull] public string Property {get; private set;}
    [NotNull] public string Docstring {get; private set;}
    
    //private fields
    //primary constructor
    public Row(
      [NotNull] string property,
      [NotNull] string docstring
    )
    {
      if (property == null) throw new ArgumentNullException("property");
      if (docstring == null) throw new ArgumentNullException("docstring");
      
      Property = property;
      Docstring = docstring;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string property, [NotNull] out string docstring)
    {
      property = Property;
      docstring = Docstring;
    }
    //statics
    
    public static CtxReadDelegate<Row> Read = (ctx, reader) => 
    {
      var property = reader.ReadString();
      var docstring = reader.ReadString();
      var _result = new Row(property, docstring);
      return _result;
    };
    
    public static CtxWriteDelegate<Row> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Property);
      writer.Write(value.Docstring);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((Row) obj);
    }
    public bool Equals(Row other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Property == other.Property && Docstring == other.Docstring;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Property.GetHashCode();
        hash = hash * 31 + Docstring.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("Row (");
      using (printer.IndentCookie()) {
        printer.Print("property = "); Property.PrintEx(printer); printer.Println();
        printer.Print("docstring = "); Docstring.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: StatisticsToolWindowModel.kt:19</p>
  /// </summary>
  public sealed class ToolWindowContent : IPrintable, IEquatable<ToolWindowContent>
  {
    //fields
    //public fields
    [NotNull] public List<Row> Rows {get; private set;}
    
    //private fields
    //primary constructor
    public ToolWindowContent(
      [NotNull] List<Row> rows
    )
    {
      if (rows == null) throw new ArgumentNullException("rows");
      
      Rows = rows;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out List<Row> rows)
    {
      rows = Rows;
    }
    //statics
    
    public static CtxReadDelegate<ToolWindowContent> Read = (ctx, reader) => 
    {
      var rows = ReadRowList(ctx, reader);
      var _result = new ToolWindowContent(rows);
      return _result;
    };
    public static CtxReadDelegate<List<Row>> ReadRowList = Row.Read.List();
    
    public static CtxWriteDelegate<ToolWindowContent> Write = (ctx, writer, value) => 
    {
      WriteRowList(ctx, writer, value.Rows);
    };
    public static  CtxWriteDelegate<List<Row>> WriteRowList = Row.Write.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ToolWindowContent) obj);
    }
    public bool Equals(ToolWindowContent other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Rows.SequenceEqual(other.Rows);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Rows.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ToolWindowContent (");
      using (printer.IndentCookie()) {
        printer.Print("rows = "); Rows.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
